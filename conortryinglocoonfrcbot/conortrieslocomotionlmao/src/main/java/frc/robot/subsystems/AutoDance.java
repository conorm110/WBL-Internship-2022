package frc.robot.subsystems;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class AutoDance extends SubsystemBase {

  private String name;
  static private int dance_instr_index = 0;
  static private int dance_step_cycles = 0;
  private static boolean dance_over = false;
  private Timer timmy;

  // femmebot dance
  private static double[][] dance_instr = {
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1},
    {3, 3,  20, 160,  90,  20, 0.1},
    {3, 3,  20, 160,  20,  20, 0.1},
    {3, 3,  55, 125,  20,  20, 0.1},
    {3, 3,  90,  90,  20,  20, 0.1},
    {3, 3, 125,  55,  20,  20, 0.1},
    {3, 3, 160,  20,  90,  20, 0.1},
    {3, 3, 160,  20, 160,  90, 0.1},
    {3, 3, 125,  55, 160,  90, 0.1},
    {3, 3,  90,  90, 160,  90, 0.1},
    {3, 3,  55, 125, 160,  90, 0.1},
    {3, 3,  20, 160,  90,  90, 0.1},
    {-3, -3,  20, 160,  20,  90, 0.1},
    {-3, -3,  55, 125,  20,  90, 0.1},
    {-3, -3,  90,  90,  20,  90, 0.1},
    {-3, -3, 125,  55,  20,  90, 0.1},
    {-3, -3, 160,  20,  90,  90, 0.1},
    {-3, -3, 160,  20, 160, 160, 0.1},
    {-3, -3, 125,  55, 160, 160, 0.1},
    {-3, -3,  90,  90, 160, 160, 0.1},
    {-3, -3,  55, 125, 160, 160, 0.1},
    {-3, -3,  20, 160,  90, 160, 0.1}

  };

  public AutoDance(String name, Timer timstwinfr)
  {
      this.name = name;
      timmy = timstwinfr;
  }
  
  public void start()
  {
      timmy.reset();
      timmy.start();
  }
  public void check()
  {
    
  }

  public static void AutoLoop() 
  {
    try {
      Movement.leftJaguar.setVoltage(dance_instr[dance_instr_index][0]);
      Movement.rightJaguar.setVoltage(dance_instr[dance_instr_index][1]);
      Movement.moveArmLeft(dance_instr[dance_instr_index][2]);
      Movement.moveArmRight(dance_instr[dance_instr_index][3]);
      Movement.moveHeadX(dance_instr[dance_instr_index][4]);
      Movement.moveHeadY(dance_instr[dance_instr_index][5]);
      
      Timer.delay(dance_instr[dance_instr_index][6]);
      dance_instr_index++;
    } catch(Exception e) {
      Movement.stop();
    }
  }

  @Override
  public void periodic() {  }
  @Override
  public void simulationPeriodic() {  }
}
